# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import api_pb2 as api__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.67.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in api_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CompanionsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetUser = channel.unary_unary(
                '/api.Companions/GetUser',
                request_serializer=api__pb2.GetUserRequest.SerializeToString,
                response_deserializer=api__pb2.User.FromString,
                _registered_method=True)
        self.CreateUser = channel.unary_unary(
                '/api.Companions/CreateUser',
                request_serializer=api__pb2.CreateUserRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.DeleteUser = channel.unary_unary(
                '/api.Companions/DeleteUser',
                request_serializer=api__pb2.DeleteUserRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.UpdateUser = channel.unary_unary(
                '/api.Companions/UpdateUser',
                request_serializer=api__pb2.UpdateUserRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.BlockUser = channel.unary_unary(
                '/api.Companions/BlockUser',
                request_serializer=api__pb2.BlockUserRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.GetRide = channel.unary_unary(
                '/api.Companions/GetRide',
                request_serializer=api__pb2.GetRideRequest.SerializeToString,
                response_deserializer=api__pb2.Ride.FromString,
                _registered_method=True)
        self.CreateRide = channel.unary_unary(
                '/api.Companions/CreateRide',
                request_serializer=api__pb2.CreateRideRequest.SerializeToString,
                response_deserializer=api__pb2.CreateRideResponse.FromString,
                _registered_method=True)
        self.DeleteRide = channel.unary_unary(
                '/api.Companions/DeleteRide',
                request_serializer=api__pb2.DeleteRideRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.UpdateRide = channel.unary_unary(
                '/api.Companions/UpdateRide',
                request_serializer=api__pb2.UpdateRideRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.GetSimilarRides = channel.unary_unary(
                '/api.Companions/GetSimilarRides',
                request_serializer=api__pb2.GetSimilarRidesRequest.SerializeToString,
                response_deserializer=api__pb2.Rides.FromString,
                _registered_method=True)
        self.GetUserRides = channel.unary_unary(
                '/api.Companions/GetUserRides',
                request_serializer=api__pb2.GetUserRidesRequest.SerializeToString,
                response_deserializer=api__pb2.Rides.FromString,
                _registered_method=True)


class CompanionsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetUser(self, request, context):
        """Get User by Telegram ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateUser(self, request, context):
        """Create new User with the specified info and Telegram ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUser(self, request, context):
        """Delete User with the specified Telegram ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUser(self, request, context):
        """Update existing User
        Request must contain `user_id` and fields that need to be updated 
        Other fields should not be set
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BlockUser(self, request, context):
        """Notify the system that User with id `blocking_user_id`
        wants to block user with id `blocked_user_id`
        Both IDs are the same as Telegram IDs but they both must
        be registered by the system previously (by CreateUser method)
        Both users will not be able to see each other's Rides, 
        i. e. GetSimilarRides will skip Rides that have conflicting users
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRide(self, request, context):
        """Get Ride by Ride ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRide(self, request, context):
        """Create new Ride (insert it into the System)
        Request should not include Ride ID, it set internally
        and returned in CreateRideResponse
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRide(self, request, context):
        """Delete Ride with the specified ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRide(self, request, context):
        """Update existing Ride
        Request must contain `ride_id`, and fields that need to be updated
        Other fields should not be set
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSimilarRides(self, request, context):
        """Get Rides similar to `ride` in GetSimilarRidesRequest
        The deadlines of `ride` in request and matched ride are guaranteed to intersect
        The distance from `start_point` of `ride` in request and `start_point`
        in each matched Ride will be less than `start_radius`
        The same is for `end_point`
        Returns empty list if there are no Rides that match the criteria
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserRides(self, request, context):
        """Get all Rides associated with the User (by Telegram ID)
        Returns empty list if user has no outstanding Rides
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CompanionsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=api__pb2.GetUserRequest.FromString,
                    response_serializer=api__pb2.User.SerializeToString,
            ),
            'CreateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUser,
                    request_deserializer=api__pb2.CreateUserRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'DeleteUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUser,
                    request_deserializer=api__pb2.DeleteUserRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'UpdateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUser,
                    request_deserializer=api__pb2.UpdateUserRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'BlockUser': grpc.unary_unary_rpc_method_handler(
                    servicer.BlockUser,
                    request_deserializer=api__pb2.BlockUserRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetRide': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRide,
                    request_deserializer=api__pb2.GetRideRequest.FromString,
                    response_serializer=api__pb2.Ride.SerializeToString,
            ),
            'CreateRide': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRide,
                    request_deserializer=api__pb2.CreateRideRequest.FromString,
                    response_serializer=api__pb2.CreateRideResponse.SerializeToString,
            ),
            'DeleteRide': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRide,
                    request_deserializer=api__pb2.DeleteRideRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'UpdateRide': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRide,
                    request_deserializer=api__pb2.UpdateRideRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetSimilarRides': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSimilarRides,
                    request_deserializer=api__pb2.GetSimilarRidesRequest.FromString,
                    response_serializer=api__pb2.Rides.SerializeToString,
            ),
            'GetUserRides': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserRides,
                    request_deserializer=api__pb2.GetUserRidesRequest.FromString,
                    response_serializer=api__pb2.Rides.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.Companions', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('api.Companions', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Companions(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Companions/GetUser',
            api__pb2.GetUserRequest.SerializeToString,
            api__pb2.User.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Companions/CreateUser',
            api__pb2.CreateUserRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Companions/DeleteUser',
            api__pb2.DeleteUserRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Companions/UpdateUser',
            api__pb2.UpdateUserRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BlockUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Companions/BlockUser',
            api__pb2.BlockUserRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRide(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Companions/GetRide',
            api__pb2.GetRideRequest.SerializeToString,
            api__pb2.Ride.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateRide(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Companions/CreateRide',
            api__pb2.CreateRideRequest.SerializeToString,
            api__pb2.CreateRideResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteRide(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Companions/DeleteRide',
            api__pb2.DeleteRideRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateRide(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Companions/UpdateRide',
            api__pb2.UpdateRideRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSimilarRides(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Companions/GetSimilarRides',
            api__pb2.GetSimilarRidesRequest.SerializeToString,
            api__pb2.Rides.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserRides(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Companions/GetUserRides',
            api__pb2.GetUserRidesRequest.SerializeToString,
            api__pb2.Rides.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
